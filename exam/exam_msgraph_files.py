"""
The configuration file would look like this (sans those // comments):
{
    "authority": "https://login.microsoftonline.com/Enter_the_Tenant_Name_Here",
    "client_id": "your_client_id",
    "scope": ["https://graph.microsoft.com/.default"],
        // For more information about scopes for an app, refer:
        // https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-client-creds-grant-flow#second-case-access-token-request-with-a-certificate"
    "secret": "The secret generated by AAD during your confidential app registration",
        // For information about generating client secret, refer:
        // https://github.com/AzureAD/microsoft-authentication-library-for-python/wiki/Client-Credentials#registering-client-secrets-using-the-application-registration-portal
    "endpoint": "https://graph.microsoft.com/v1.0/users"
}
You can then run this sample with a JSON configuration file:
    python sample.py parameters.json
"""

# ref: https://github.com/Azure-Samples/ms-identity-python-daemon/tree/master/1-Call-MsGraph-WithSecret

import sys  # For simplicity, we'll read config file from 1st CLI param sys.argv[1]
import json
import logging

import requests
import msal

base_endpoint = "https://graph.microsoft.com/v1.0/"

# Optional logging
# logging.basicConfig(level=logging.DEBUG)

config = json.load(open(sys.argv[1]))

user_id = config["user_id"]

# Create a preferably long-lived app instance which maintains a token cache.
app = msal.ConfidentialClientApplication(
    config["client_id"], authority=config["authority"],
    client_credential=config["secret"],
    # token_cache=...  # Default cache is in memory only.
                       # You can learn how to use SerializableTokenCache from
                       # https://msal-python.rtfd.io/en/latest/#msal.SerializableTokenCache
    )

# The pattern to acquire a token looks like this.
result = None

# Firstly, looks up a token from cache
# Since we are looking for token for the current app, NOT for an end user,
# notice we give account parameter as None.
result = app.acquire_token_silent(config["scope"], account=None)

if not result:
    logging.info("No suitable token exists in cache. Let's get a new one from AAD.")
    result = app.acquire_token_for_client(scopes=config["scope"])

if "access_token" in result:
    # Calling graph using the access token
    graph_data = requests.get(  # Use token to call downstream service
        base_endpoint + f"users/{user_id}/drive/root/children",
        headers={'Authorization': 'Bearer ' + result['access_token']}, ).json()
    print("Graph API call result: ")
    print(json.dumps(graph_data, indent=2))
    
    target_dir_id = config["target_dir_id"]
    graph_data = requests.get(  # Use token to call downstream service
        base_endpoint + f"users/{user_id}/drive/items/{target_dir_id}/",
        headers={'Authorization': 'Bearer ' + result['access_token']}, ).json()
    print("Graph API call result: user_id and item id")
    print(json.dumps(graph_data, indent=2))

    
    import urllib.parse
    item_path = urllib.parse.quote("pycon-mini-shizuoka/talk-recoder/")
    graph_data = requests.get(  # Use token to call downstream service
        base_endpoint + f"users/{user_id}/drive/root:/{item_path}",
        headers={'Authorization': 'Bearer ' + result['access_token']}, ).json()
    print("Graph API call result: user_id + drivepath")
    print(json.dumps(graph_data, indent=2))
else:
    print(result.get("error"))
    print(result.get("error_description"))
    print(result.get("correlation_id"))  # You may need this when reporting a bug

# メモ
"""
- 認証方法は、クライアントシークレット経由で、APIアクセス許可はアプリケーション向けのもの。
- 管理者がシークレットの利用を同意している状態で動く
- user_idはparameter.jsonに入れてる。Azure Active DirectoryのユーザーにあるオブジェクトIDをツカッテル
- この方法だと、個人のOneDriveは扱えない（endpoint/me/driveへのアクセスはクライアントシークレットでは見れないかも）
- 特定のディレクトリを見に行くこともできる。idをitem-idとして見て詳細を見に行けばいい
  - item-idは項目取得方法でいい。getでその項目情報が手に入るし、仮にフォルダならchildrenをそのあとにつける（パラメータ）とこの要素が見られる
- 特定のディレクトリは、user_idが指定出来たら、ディレクトリのパスでも見に行ける
  - パスがないなら、生成してしまっても良いと思う。

- 次はファイルのアップロードにトライする

"""